pipeline {
    agent any

    parameters {
        // (Branch for each service to build)
        string(name: 'admin-server', defaultValue: 'main', description: 'Branch for admin-server')
        string(name: 'api-gateway', defaultValue: 'main', description: 'Branch for api-gateway')
        string(name: 'config-server', defaultValue: 'main', description: 'Branch for config-server')
        string(name: 'customers-service', defaultValue: 'main', description: 'Branch for customers-service')
        string(name: 'discovery-server', defaultValue: 'main', description: 'Branch for discovery-server')
        string(name: 'genai-service', defaultValue: 'main', description: 'Branch for genai-service')
        string(name: 'vets-service', defaultValue: 'main', description: 'Branch for vets-service')
        string(name: 'visits-service', defaultValue: 'main', description: 'Branch for visits-service')
    }

    environment {
        HELM_CHART_DIR = "./preview-deploy"
    }

    stages {

        stage('Check branches') {
            steps {
                script {
                    def branches = [
                        params['admin-server'],
                        params['api-gateway'],
                        params['config-server'],
                        params['customers-service'],
                        params['discovery-server'],
                        params['genai-service'],
                        params['vets-service'],
                        params['visits-service']
                    ]
                    def allMain = branches.every { it == 'main' }

                    if (allMain) {
                        error("All branches are 'main'. Skipping deployment for developer.")
                    }
                }
            }
        }

        stage('Deploy on K8s cluster') {
            steps {
                script {
                    def services = [
                        [key: 'admin-server', branch: params['admin-server']],
                        [key: 'api-gateway', branch: params['api-gateway']],
                        [key: 'config-server', branch: params['config-server']],
                        [key: 'customers-service', branch: params['customers-service']],
                        [key: 'discovery-server', branch: params['discovery-server']],
                        [key: 'genai-service', branch: params['genai-service']],
                        [key: 'vets-service', branch: params['vets-service']],
                        [key: 'visits-service', branch: params['visits-service']]
                    ]

                    def setArgs = ""
                    def valuesArgs = ""
                    def hashPart = ""

                    services.each { svc ->
                        def fullName = "spring-petclinic-${svc.key}"
                        def branch = svc.branch

                        // valuesArgs += " -f values/${svc.key}/values.yaml"
                        valuesArgs += " -f ${HELM_CHART_DIR}/values/${svc.key}/values.yaml"


                        if (branch == 'main') {
                            setArgs += " --set services.\"${fullName}\".tag=latest"
                        } else {
                            def commit = sh(
                                script: "git ls-remote origin refs/heads/${branch} | cut -c1-7",
                                returnStdout: true
                            ).trim()

                            setArgs += " --set services.\"${fullName}\".tag=${commit}"
                            hashPart += "-${commit}"
                        }
                    }

                    // valuesArgs += " -f values/ingress/values.yaml"
                    // valuesArgs += " -f ${HELM_CHART_DIR}/values/ingress/values.yaml"
                    valuesArgs += " -f ${HELM_CHART_DIR}/ingress-values.yaml"
                    setArgs += " --set ingress.host=preview.dev${hashPart}"



                    def releaseName = "preview-deploy${hashPart}"
                    def namespace = "preview-deploy${hashPart}"

                    echo "Release: ${releaseName}"
                    echo "Namespace: ${namespace}"

                    sh """
                        helm upgrade --install ${releaseName} ${HELM_CHART_DIR} \
                          -n ${namespace} --create-namespace \
                          ${valuesArgs} \
                          ${setArgs}
                    """
                }
            }
        }
    }
}
